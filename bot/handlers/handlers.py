
from aiogram import Router, types
from aiogram.filters import CommandStart
from data.mistral import get_mistral_response
from data.orm_query import orm_add_user
from sqlalchemy.ext.asyncio import AsyncSession
from data.utils import escape_markdown_v2

router = Router()



# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
with open("bot/company_info.md", "r", encoding="utf-8") as file:
    raw_company_knowledge = file.read()
    company_knowledge = escape_markdown_v2(raw_company_knowledge)

# üé¨ –°—Ç–∞—Ä—Ç-–∫–æ–º–∞–Ω–¥–∞
@router.message(CommandStart())
async def start_handler(message: types.Message, session: AsyncSession):
    await orm_add_user(
        session,
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    await message.answer("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Mistral AI. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")

# üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º
async def send_long_message(message: types.Message, text: str):
    max_length = 4096
    for i in range(0, len(text), max_length):
        await message.answer(text[i:i + max_length], disable_web_page_preview=True)

# ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@router.message()
async def consult_user(message: types.Message):
    user_text = escape_markdown_v2(message.text)  # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prompt = (
        f"–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ó–ê–û '–°–ª–∏–≤–∫–∏ –±–∞–π'. "
        f"–î–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ, —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã.\n"
        f"–£ —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:\n{company_knowledge}\n"
        f"–í–æ–ø—Ä–æ—Å: {user_text}"
    )

    response = get_mistral_response(prompt)

    if not response:
        response = "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É."

    response = escape_markdown_v2(response)
    await send_long_message(message, response)









###############################################################33

# from aiogram import Router, types
# from aiogram.filters import CommandStart
# from data.mistral import get_mistral_response
# from data.orm_query import orm_add_user
# from sqlalchemy.ext.asyncio import AsyncSession
# from data.mistral import get_mistral_response
#
#
# router = Router()
#
#
# # with open("bot/company_info.txt", "r", encoding="utf-8") as file:
# with open("bot/company_info.md", "r", encoding="utf-8") as file:
#     company_knowledge = file.read()
#
#
# @router.message(CommandStart())
# async def start_handler(message: types.Message, session: AsyncSession):
#
#     await orm_add_user(session,
#                        user_id=message.from_user.id,
#                        username=message.from_user.username,
#                        first_name=message.from_user.first_name,
#                        last_name=message.from_user.last_name,
#                        )
#     await message.answer("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Mistral AI. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
#
#
#
# async def send_long_message(message: types.Message, text: str):
#     max_length = 4096
#     for i in range(0, len(text), max_length):
#         await message.answer(text[i:i + max_length], disable_web_page_preview=True)
#
#
# @router.message()
# async def consult_user(message: types.Message):
#     user_text = message.text
#     prompt = (
#         f"–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ó–ê–û '–°–ª–∏–≤–∫–∏ –±–∞–π'. "
#         f"–î–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ, —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã.\n"
#         f"–£ —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:\n{company_knowledge}\n"
#         f"–í–æ–ø—Ä–æ—Å: {user_text}"
#     )
#
#     response = get_mistral_response(prompt)
#
#     if not response:
#         response = "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É."
#
#     await send_long_message(message, response)


##################################################################################################

# with open("bot/company_info.md", "r", encoding="utf-8") as file:
#     company_knowledge = file.read()
#
# @router.message()
# async def consult_user(message: types.Message):
#     user_text = message.text
#     prompt = f"–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ó–ê–û '–°–ª–∏–≤–∫–∏ –±–∞–π'. –£ —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:\n{company_knowledge}\n–í–æ–ø—Ä–æ—Å: {user_text}"
#     response = get_mistral_response(prompt)
#
#     if not response:
#         response = "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É."
#
#     await message.answer(response,
#                          disable_web_page_preview=True)









# @router.message()
# async def chat_handler(message: types.Message):
#     user_text = message.text
#     response = get_mistral_response(user_text)
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
#     if not response or response is None:
#         response = "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
#
#     # save_message(message.from_user.id, user_text, response)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
#
#     await message.answer(response)

